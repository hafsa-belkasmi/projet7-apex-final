public class CommandeTriggerHandler {

    // Avant insertion : interdiction de plusieurs commandes brouillon pour un m√™me compte
    public static void beforeInsert(List<Commande__c> commandes) {
        Set<Id> compteIds = new Set<Id>();
        System.debug('D√©but beforeInsert');

        // √âtape 1 : Extraire les comptes des commandes en brouillon
        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon' && cmd.Compte__c != null) {
                compteIds.add(cmd.Compte__c);
            }
        }
        System.debug('Comptes concern√©s : ' + compteIds);

        // √âtape 2 : Requ√™te des brouillons existants d√©j√† enregistr√©s en base
        Map<Id, Integer> brouillonsExistants = new Map<Id, Integer>();
        if (!compteIds.isEmpty()) {
            for (AggregateResult ar : [
                SELECT Compte__c compteId, COUNT(Id) total
                FROM Commande__c
                WHERE Statut__c = 'Brouillon' AND Compte__c IN :compteIds
                GROUP BY Compte__c
            ]) {
                Id compteId = (Id) ar.get('compteId');
                Integer total = (Integer) ar.get('total');
                brouillonsExistants.put(compteId, total);
                System.debug(' Brouillons en base pour ' + compteId + ' : ' + total);
            }
        }

        // √âtape 3 : V√©rifie aussi les brouillons de cette m√™me transaction (en m√©moire)
        Map<Id, Integer> brouillonsDansTransaction = new Map<Id, Integer>();

        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon' && cmd.Compte__c != null) {
                Id compteId = cmd.Compte__c;

                Integer dejaEnBase = brouillonsExistants.get(compteId) != null ? brouillonsExistants.get(compteId) : 0;
                Integer enMemoire = brouillonsDansTransaction.get(compteId) != null ? brouillonsDansTransaction.get(compteId) : 0;

                System.debug('üîç V√©rification commande : compte=' + compteId + ', en base=' + dejaEnBase + ', en m√©moire=' + enMemoire);

                if (dejaEnBase + enMemoire >= 1) {
                    System.debug(' Erreur : commande refus√©e (d√©j√† un brouillon existant)');
                    cmd.addError('Un client ne peut avoir qu\'une seule commande en brouillon.');
                } else {
                    brouillonsDansTransaction.put(compteId, enMemoire + 1);
                    System.debug(' Commande accept√©e pour ce compte');
                }
            }
        }

        System.debug(' Fin beforeInsert');
    }

    // Apr√®s insertion : recalcul du montant pour les commandes en brouillon
    public static void afterInsert(List<Commande__c> commandes) {
        List<Id> commandeIds = new List<Id>();
        System.debug(' afterInsert d√©clench√©');

        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon') {
                commandeIds.add(cmd.Id);
            }
        }

        System.debug('Commandes √† recalculer : ' + commandeIds);

        if (!commandeIds.isEmpty()) {
            for (Id cmdId : commandeIds) {
                System.debug('‚Ü©Ô∏è Recalcul du montant pour la commande : ' + cmdId);
                CalculMontant.calculerMontant(cmdId);
            }
        }
    }

    // Apr√®s mise √† jour : recalcul si statut devient "Brouillon" ou si quantit√© change
    public static void afterUpdate(List<Commande__c> newList, Map<Id, Commande__c> oldMap) {
        List<Id> commandeIds = new List<Id>();
        System.debug('afterUpdate d√©clench√©');

        for (Commande__c cmd : newList) {
            Commande__c oldCmd = oldMap.get(cmd.Id);

            Boolean quantiteModifiee = cmd.Quantite_articles__c != oldCmd.Quantite_articles__c;
            Boolean statutRevenuBrouillon = oldCmd.Statut__c != 'Brouillon' && cmd.Statut__c == 'Brouillon';

            if (quantiteModifiee || statutRevenuBrouillon) {
                commandeIds.add(cmd.Id);
                System.debug('Commande modifi√©e √† recalculer : ' + cmd.Id);
            }
        }

        if (!commandeIds.isEmpty()) {
            for (Id cmdId : commandeIds) {
                System.debug('‚Ü©Ô∏è Recalcul du montant apr√®s update : ' + cmdId);
                CalculMontant.calculerMontant(cmdId);
            }
        }
    }
}
