/**
 * Classe handler pour le d√©clencheur (trigger) sur l‚Äôobjet Commande__c.
 * 
 * R√¥les principaux :
 *  - V√©rifier les contraintes m√©tier lors de l‚Äôinsertion (un seul brouillon par compte)
 *  - Recalculer le montant des commandes apr√®s insertion ou mise √† jour
 */
public class CommandeTriggerHandler {
      /**
     * √âv√©nement BEFORE INSERT.
     * 
     * V√©rifie qu‚Äôun m√™me compte ne poss√®de pas d√©j√† une commande en brouillon.
     * Si c‚Äôest le cas, une erreur est ajout√©e pour emp√™cher l‚Äôinsertion.
     *
     * @param commandes  Liste des commandes en cours d‚Äôinsertion
     */
    public static void beforeInsert(List<Commande__c> commandes) {
        Set<Id> compteIds = new Set<Id>();
        System.debug('D√©but beforeInsert');

        // √âtape 1 : Extraire les comptes des commandes en brouillon
        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon' && cmd.Compte__c != null) {
                compteIds.add(cmd.Compte__c);
            }
        }
        System.debug('Comptes concern√©s : ' + compteIds);

        // √âtape 2 : Requ√™te des brouillons existants d√©j√† enregistr√©s en base
        Map<Id, Integer> brouillonsExistants = new Map<Id, Integer>();
        if (!compteIds.isEmpty()) {
            for (AggregateResult ar : [
                SELECT Compte__c compteId, COUNT(Id) total
                FROM Commande__c
                WHERE Statut__c = 'Brouillon' AND Compte__c IN :compteIds
                GROUP BY Compte__c
            ]) {
                Id compteId = (Id) ar.get('compteId');
                Integer total = (Integer) ar.get('total');
                brouillonsExistants.put(compteId, total);
                System.debug(' Brouillons en base pour ' + compteId + ' : ' + total);
            }
        }

        // √âtape 3 : V√©rifie aussi les brouillons de cette m√™me transaction (en m√©moire)
        Map<Id, Integer> brouillonsDansTransaction = new Map<Id, Integer>();

        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon' && cmd.Compte__c != null) {
                Id compteId = cmd.Compte__c;

                Integer dejaEnBase = brouillonsExistants.get(compteId) != null ? brouillonsExistants.get(compteId) : 0;
                Integer enMemoire = brouillonsDansTransaction.get(compteId) != null ? brouillonsDansTransaction.get(compteId) : 0;

                System.debug('üîç V√©rification commande : compte=' + compteId + ', en base=' + dejaEnBase + ', en m√©moire=' + enMemoire);

                if (dejaEnBase + enMemoire >= 1) {
                    System.debug(' Erreur : commande refus√©e (d√©j√† un brouillon existant)');
                    cmd.addError('Un client ne peut avoir qu\'une seule commande en brouillon.');
                } else {
                    brouillonsDansTransaction.put(compteId, enMemoire + 1);
                    System.debug(' Commande accept√©e pour ce compte');
                }
            }
        }

        System.debug(' Fin beforeInsert');
    }
       /**
     * √âv√©nement AFTER INSERT.
     * 
     * Apr√®s insertion d‚Äôune commande en brouillon,
     * d√©clenche le recalcul du montant via la classe CalculMontant.
     *
     * @param commandes  Liste des commandes nouvellement ins√©r√©es
     */
    public static void afterInsert(List<Commande__c> commandes) {
        List<Id> commandeIds = new List<Id>();
        System.debug(' afterInsert d√©clench√©');

        for (Commande__c cmd : commandes) {
            if (cmd.Statut__c == 'Brouillon') {
                commandeIds.add(cmd.Id);
            }
        }

        System.debug('Commandes √† recalculer : ' + commandeIds);

        if (!commandeIds.isEmpty()) {
            for (Id cmdId : commandeIds) {
                System.debug('‚Ü©Ô∏è Recalcul du montant pour la commande : ' + cmdId);
                CalculMontant.calculerMontant(cmdId);
            }
        }
    }
/**
     * √âv√©nement AFTER UPDATE.
     * 
     * Recalcule le montant si :
     *  - la quantit√© d‚Äôarticles a chang√©
     *  - ou si le statut est redevenu "Brouillon"
     *
     * @param newList  Liste des nouvelles valeurs des commandes
     * @param oldMap   Map contenant les anciennes valeurs des commandes (par Id)
     */
    public static void afterUpdate(List<Commande__c> newList, Map<Id, Commande__c> oldMap) {
        List<Id> commandeIds = new List<Id>();
        System.debug('afterUpdate d√©clench√©');

        for (Commande__c cmd : newList) {
            Commande__c oldCmd = oldMap.get(cmd.Id);

            Boolean quantiteModifiee = cmd.Quantite_articles__c != oldCmd.Quantite_articles__c;
            Boolean statutRevenuBrouillon = oldCmd.Statut__c != 'Brouillon' && cmd.Statut__c == 'Brouillon';

            if (quantiteModifiee || statutRevenuBrouillon) {
                commandeIds.add(cmd.Id);
                System.debug('Commande modifi√©e √† recalculer : ' + cmd.Id);
            }
        }

        if (!commandeIds.isEmpty()) {
            for (Id cmdId : commandeIds) {
                System.debug('‚Ü©Ô∏è Recalcul du montant apr√®s update : ' + cmdId);
                CalculMontant.calculerMontant(cmdId);
            }
        }
    }
}
